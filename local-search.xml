<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>开发中常用的特殊SQL 语句</title>
    <link href="/2024/04/26/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%B8%B8%E7%94%A8SQL%E8%AE%B0%E5%BD%95-Mysql%208.0/"/>
    <url>/2024/04/26/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%B8%B8%E7%94%A8SQL%E8%AE%B0%E5%BD%95-Mysql%208.0/</url>
    
    <content type="html"><![CDATA[<p>连续数字  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RECURSIVE</span> cte (num) <span class="hljs-keyword">AS</span><br>(<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br>  <span class="hljs-keyword">SELECT</span> num<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> cte <span class="hljs-keyword">WHERE</span> num <span class="hljs-operator">&lt;</span> <span class="hljs-number">30</span><br>)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> cte;<br><br></code></pre></td></tr></table></figure><p>连续日期 年月日</p><pre><code class="sql">SELECT * FROM  (WITH RECURSIVE cte (date_for) AS(  SELECT DATE(&#39;2024-03-12&#39;)  UNION ALL  SELECT DATE_ADD(date_for,INTERVAL 1 DAY)  FROM cte WHERE date_for &lt; DATE(&#39;2024-04-30&#39;))SELECT date_forFROM cte) temp  LEFT JOIN table_name  ON  DATE_FORMAT(table_name.create_time,&#39;%y-%m-%d&#39;)=temp.date_for</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis集群搭建</title>
    <link href="/2023/05/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%20%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/05/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%20%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="下载官方工具-redis-trib"><a href="#下载官方工具-redis-trib" class="headerlink" title="下载官方工具(redis-trib)"></a>下载官方工具(redis-trib)</h2><h3 id="1-redis-trib-需要ruby环境-可能需要镜像安装"><a href="#1-redis-trib-需要ruby环境-可能需要镜像安装" class="headerlink" title="1. redis-trib 需要ruby环境 可能需要镜像安装"></a>1. redis-trib 需要ruby环境 可能需要镜像安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install ruby rubygems -y<br></code></pre></td></tr></table></figure><h3 id="2-创建集群"><a href="#2-创建集群" class="headerlink" title="2. 创建集群"></a>2. 创建集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入redis安装目录</span><br>cd reids安装目录/src<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建集群 <span class="hljs-comment"># --replicas 每个主节点都有从节点 -a 密码认证</span></span><br>redis-trib create -a 123456 --replicas ip:prot ip:port<br></code></pre></td></tr></table></figure><p>说明:  一主一从 是为了防止集群挂掉  Redis 最多 16384个哈希槽  在创建集群时分配 在存入数据时进行CRC16(key) % 16384计算放入哈希槽 主节点挂掉从节点会顶替</p><h3 id="3-增加主节点"><a href="#3-增加主节点" class="headerlink" title="3. 增加主节点"></a>3. 增加主节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用如下命令即可添加节点将一个新的节点添加到集群中</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a 密码认证(没有密码不用带此参数)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--cluster add-node 添加节点 新节点IP:新节点端口 任意存活节点IP:任意存活节点端口</span><br>./bin/redis-cli -a 123456 --cluster add-node 192.168.100.104:8007 192.168.100.101:8001<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新分配哈希槽  all 表示所有</span><br>./bin/redis-cli --cluster reshard 192.168.100.101:8002<br><br></code></pre></td></tr></table></figure><h3 id="4-增加从节点"><a href="#4-增加从节点" class="headerlink" title="4. 增加从节点"></a>4. 增加从节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用如下命令即可添加节点将一个新的节点添加到集群中</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a 密码认证(没有密码不用带此参数)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--cluster add-node 添加节点 新节点IP:新节点端口 任意存活节点IP:任意存活节点端口</span><br>./bin/redis-cli -a 123456 --cluster add-node 192.168.100.104:8007 192.168.100.101:8001<br><span class="hljs-meta prompt_"># </span><span class="language-bash">连接redis</span><br>./bin/redis-cli<br><span class="hljs-meta prompt_"># </span><span class="language-bash">绑定主节点</span><br>CLUSTER REPLICATE 主节点ID<br></code></pre></td></tr></table></figure><h3 id="5-删除节点"><a href="#5-删除节点" class="headerlink" title="5.删除节点"></a>5.删除节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">执行如下命令删除节点</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a 密码认证(没有密码不用带此参数)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--cluster del-node 连接任意一个存活的节点IP:连接任意一个存活的节点端口 要删除节点ID</span> <br>./bin/redis-cli -a 123456 --cluster del-node 192.168.100.101:8002 8cf44439390dc9412813ad27c43858a6bb53365c<br><br></code></pre></td></tr></table></figure><h3 id="6-重新分配槽"><a href="#6-重新分配槽" class="headerlink" title="6.重新分配槽"></a>6.重新分配槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shel"># -a 密码认证(没有密码不用带此参数)<br># --cluster rebalance 重新分配集群中的槽位<br>./bin/redis-cli -a 123456 --cluster rebalance 192.168.100.101:8002<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>linux</tag>
      
      <tag>集群</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义持久层框架</title>
    <link href="/2023/05/10/java/mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/05/10/java/mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<ol><li><p>根据路径获取流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Resouce.class.getClassLoader().getResourceAsStream(path)<br></code></pre></td></tr></table></figure></li><li><p>解析XML 文件流 生成  Bean           </p><ul><li>configuation :  用于存放数据库连接相关配置                       </li><li>mappedStatementMap  : 用于存放所有语句                             <ul><li>key:  statementId 由 namespace + 标签Id 组成               </li><li>value:  存放标签中各种属性值     </li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//利用dom4j 解析xml\</span><br><span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>().read(inputStream);<br>element.attributeValue(<span class="hljs-string">&quot;每个标签单独的值&quot;</span>);<br><span class="hljs-comment">//Xml解析出来的对象放进Properties中</span><br>properties.setProperty(name,value);<br><span class="hljs-comment">//生成对应的DataSource </span><br><span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">comboPooledDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br><span class="hljs-comment">//设置数据库连接属性</span><br><span class="hljs-comment">//放进自定义configuation 的datasrouce 属性中 方便后期使用</span><br><br><span class="hljs-comment">//获取xml文件路径 并且解析</span><br><span class="hljs-comment">//获取获取每个标签的值 生成mappedStatement </span><br><span class="hljs-comment">//追加到configuation 的 mappedStatementMap中 </span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建sqlSessionFactory 对象<ul><li>生产sqlSession:  </li></ul></li><li>实现SqlSession 方法<ul><li>selectList()</li><li>update()</li><li>….<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement,Object... params)</span>&#123;<br><span class="hljs-comment">//连接</span><br><span class="hljs-type">simpleExecutor</span> <span class="hljs-variable">simpleExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">simpleExecutor</span>();<br><span class="hljs-comment">//通过statementId  获取sql</span><br><span class="hljs-type">MappedStatement</span> <span class="hljs-variable">mappedStatement</span> <span class="hljs-operator">=</span> configuration.getMappedStatementMap().get(statementid);<br><span class="hljs-comment">//解析替换sql </span><br>List&lt;Object&gt; list = simpleExecutor.query(configuration, mappedStatement, params);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(Configuration configuration, MappedStatement mappedStatement, Object... params)</span>&#123;<br><span class="hljs-comment">//创建驱动,获取连接</span><br><span class="hljs-comment">//获取替换后的sql ? 替换#&#123;?&#125;</span><br><span class="hljs-comment">//利用反射获取值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameterMappingList.size(); i++) &#123;  <br><span class="hljs-comment">//获取 sql 中所需的 属性名</span><br>    <span class="hljs-type">ParameterMapping</span> <span class="hljs-variable">parameterMapping</span> <span class="hljs-operator">=</span> parameterMappingList.get(i);  <br><span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> parameterMapping.getContent();<br><span class="hljs-comment">//反射</span><br>Class&lt;?&gt; paramtertypeClass = Class.forName(paramterType);<br><span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> paramtertypeClass.getDeclaredField(content);<br><span class="hljs-comment">//暴力访问</span><br>declaredField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//获取到入参对应属性的值</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> declaredField.get(params[<span class="hljs-number">0</span>])<br><span class="hljs-comment">//执行sql 值设置</span><br>preparedStatement.setObject(i+<span class="hljs-number">1</span>,o);<br><br>&#125;<br><span class="hljs-comment">//执行sql </span><br><span class="hljs-comment">//封装返回结果集</span><br>....<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getMapper</span><span class="hljs-params">(Class&lt;?&gt; mapperClass)</span> &#123;  <br>    <span class="hljs-comment">// 使用JDK动态代理来为Dao接口生成代理对象，并返回  </span><br><span class="hljs-comment">//所有方法执行的时候都会调用invoke方法</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(DefaultSqlSession.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;mapperClass&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;  <br>        <span class="hljs-meta">@Override</span>  <br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>            <span class="hljs-comment">// 底层都还是去执行JDBC代码 //根据不同情况，来调用selctList或者selectOne  </span><br>            <span class="hljs-comment">// 准备参数 1：statmentid :sql语句的唯一标识：namespace.id= 接口全限定名.方法名  </span><br>            <span class="hljs-comment">// 方法名：findAll  </span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();  <br>            <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> method.getDeclaringClass().getName();  <br>  <br>            <span class="hljs-type">String</span> <span class="hljs-variable">statementId</span> <span class="hljs-operator">=</span> className+<span class="hljs-string">&quot;.&quot;</span>+methodName;  <br>  <br>            <span class="hljs-comment">// 准备参数2：params:args  </span><br>            <span class="hljs-comment">// 获取被调用方法的返回值类型  </span><br>            <span class="hljs-type">Type</span> <span class="hljs-variable">genericReturnType</span> <span class="hljs-operator">=</span> method.getGenericReturnType();  <br>            <span class="hljs-comment">// 判断是否进行了 泛型类型参数化  </span><br>            <span class="hljs-keyword">if</span>(genericReturnType <span class="hljs-keyword">instanceof</span> ParameterizedType)&#123;  <br>                List&lt;Object&gt; objects = selectList(statementId, args);  <br>                <span class="hljs-keyword">return</span> objects;  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> selectOne(statementId,args);  <br>  <br>        &#125;  <br>    &#125;);  <br>  <br>    <span class="hljs-keyword">return</span> (T) proxyInstance;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用事件监听推送邮件</title>
    <link href="/2023/04/12/%E8%87%AA%E5%BB%BA/%E5%8A%9F%E8%83%BD%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81/%E9%82%AE%E4%BB%B6/"/>
    <url>/2023/04/12/%E8%87%AA%E5%BB%BA/%E5%8A%9F%E8%83%BD%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81/%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖:"></a>pom依赖:</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sun.mail<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><ol><li>利用事件监听来推送邮件<h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendEmailProvider</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 推送邮件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mail      接收邮箱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> accountId 推送邮箱编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nickName  发件人名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> title     标题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content   推送内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendEmailMessage</span><span class="hljs-params">(String mail, Long accountId, String nickName, String title, String content)</span> &#123;<br>        <span class="hljs-type">SendEmailMessage</span> <span class="hljs-variable">sendEmailMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendEmailMessage</span>().setMail(mail)<br>                .setAccountId(accountId)<br>                .setNickname(nickName)<br>                .setTitle(title)<br>                .setContent(content);<br>        applicationContext.publishEvent(sendEmailMessage);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendEmailConsumer</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;email.sendHost:smtp.qq.com&#125;&quot;)</span><br>    String sendHost;<br>    <span class="hljs-meta">@Value(&quot;$&#123;email.sendPort:25&#125;&quot;)</span><br>    Integer sendPort;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;email.user&#125;&quot;)</span><br>    String sendUser;<br>    <span class="hljs-meta">@Value(&quot;$&#123;email.password&#125;&quot;)</span><br>    String password;<br>    <br>    <span class="hljs-meta">@EventListener</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(SendEmailMessage message)</span>&#123;<br>        <span class="hljs-comment">// 1. 创建发送账号</span><br>        <span class="hljs-type">MailAccount</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MailAccount</span>();<br>        <span class="hljs-comment">//构建推送参数</span><br>        account.setHost(sendHost);<br>        account.setPort(sendPort);<br>        account.setAuth(<span class="hljs-literal">true</span>);<br>        account.setFrom(sendUser);<br>        account.setUser(sendUser);<br>        account.setPass(password);<br>        <span class="hljs-comment">//推送</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">messageId</span> <span class="hljs-operator">=</span> MailUtil.send(account, message.getMail(),<br>                message.getTitle(), message.getContent(), <span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>邮件</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件存储选型</title>
    <link href="/2022/12/09/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E9%80%89%E5%9E%8B/"/>
    <url>/2022/12/09/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E9%80%89%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">对比项</th><th align="center">OSS</th><th align="center">文件系统</th></tr></thead><tbody><tr><td align="center">数据模型</td><td align="center">OSS是一个分布式的对象存储服务，提供的是一个Key-Value对形式的对象存储服务。</td><td align="center">文件系统是一种典型的树状索引结构。</td></tr><tr><td align="center">数据获取</td><td align="center">根据Object的名称（Key）唯一的获取该Object的内容。虽然用户可以使用类似test1/test.jpg的名字，但是这并不表示用户的Object是保存在test1目录下面的。对于OSS来说，test1/test.jpg仅仅只是一个字符串，与example.jpg并没有本质的区别。因此不同名称的Object之间的访问消耗的资源是类似的。</td><td align="center">一个名为test1/test.jpg的文件，访问过程需要先访问到test1这个目录，然后再在该目录下查找名为test.jpg的文件。</td></tr><tr><td align="center">优势</td><td align="center">支持海量的用户并发访问。</td><td align="center">支持文件的修改，比如修改指定偏移位置的内容、截断文件尾部等。也支持文件夹的操作，比如重命名目录、删除目录、移动目录等非常容易。</td></tr><tr><td align="center">劣势</td><td align="center">OSS保存的Object不支持修改（追加写Object需要调用特定的接口，生成的Object也和正常上传的Object类型上有差别）。用户哪怕是仅仅需要修改一个字节也需要重新上传整个Object。OSS可以通过一些操作来模拟类似文件夹的功能，但是代价非常昂贵。比如重命名目录，希望将test1目录重命名成test2，那么OSS的实际操作是将所有以test1/开头的Object都重新复制成以test2/开头的Object，这是一个非常消耗资源的操作。因此在使用OSS的时候要尽量避免类似的操作。</td><td align="center">受限于单个设备的性能。访问越深的目录消耗的资源也越大，操作拥有很多文件的目录也会非常慢。</td></tr></tbody></table><h2 id="MINIO"><a href="#MINIO" class="headerlink" title="MINIO"></a>MINIO</h2><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件存储目录</span><br>mkdir -p /data/minio<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改可读权限</span><br>chmod +x minio <br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker运行</span><br>docker run -p 9000:9000 -e &quot;MINIO_ROOT_USER=admin&quot; -e &quot;MINIO_ROOT_PASSWORD=admin123&quot; -v /data/minio:/data -d minio/minio server /data<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>文件系统</tag>
      
      <tag>OSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义Mybatis 插件</title>
    <link href="/2022/10/10/java/mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/10/10/java/mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>每个对象创建时，都需要通过  interceptorChain.pluginAll(执行器)生成代理对象</li><li>pluginAll 方法中遍历拦截器对 新建对象进行代理</li></ol><h3 id="可拦截对象"><a href="#可拦截对象" class="headerlink" title="可拦截对象"></a>可拦截对象</h3><ul><li>Excutor : sql 执行器</li><li>StatementHandler : Sql 构建器</li><li>ParameterHandler : 参数处理器</li><li>ResultSetHandler ： 结果集处理器</li></ul><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">@Signature(  </span><br><span class="hljs-meta">    type = Executor.class,  </span><br><span class="hljs-meta">    method = &quot;query&quot;,  </span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;  </span><br><span class="hljs-meta">), @Signature(  </span><br><span class="hljs-meta">    type = Executor.class,  </span><br><span class="hljs-meta">    method = &quot;query&quot;,  </span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;  </span><br><span class="hljs-meta">), @Signature(  </span><br><span class="hljs-meta">    type = Executor.class,  </span><br><span class="hljs-meta">    method = &quot;update&quot;,  </span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class&#125;  </span><br><span class="hljs-meta">)&#125;)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MasterSlaveAutoRoutingPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br><span class="hljs-comment">//只要被拦截的方法都会执行改内容 jdk 动态代理 invoke</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Invocation invocation)</span>&#123;<br><span class="hljs-comment">//执行原方法</span><br><span class="hljs-keyword">return</span> invocation.proceed() <br><br>&#125;<br><span class="hljs-comment">//把该拦截器放到拦截链中</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">plugin</span><span class="hljs-params">(Object target)</span> &#123;  <br>    <span class="hljs-keyword">return</span> Plugin.wrap(target, <span class="hljs-built_in">this</span>);  <br>&#125; <br><span class="hljs-comment">//读取配置信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;  <br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客</title>
    <link href="/2022/10/09/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/10/09/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h1><p>直接去看<a href="https://github.com/fluid-dev/hexo-theme-fluid">github 官方地址-Fluid</a>就行 上面有具体的操作 </p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到指定目录</span><br>cd ../source/_posts  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建文件MakeDown 文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清除缓存&amp;&amp;</span><br>npx hexo clean &amp;&amp; npx hexo generate &amp;&amp; npx hexo deploy<br></code></pre></td></tr></table></figure><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><p>屏蔽指定文件夹:  ignore</p>]]></content>
    
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
