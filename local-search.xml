<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/06/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/RocketMq/"/>
    <url>/2024/06/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/RocketMq/</url>
    
    <content type="html"><![CDATA[<ol><li><p>为什么要保持订阅关系一致性<br>  定义:  一个GroupId 下 要保证 topic 和 tag 一致<br>  后果:  容易造成消息丢失<br>  原因:  根据TopicGroup 注册到brocker 的时候 会循环覆盖。</p></li><li><p>手动ACK 应答机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//生产者</span><br><span class="hljs-keyword">import</span> org.apache.rocketmq.spring.core.RocketMQTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RocketMQProducer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RocketMQTemplate rocketMQTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 发送消息到指定的topic</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;your_topic&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, RocketMQ!&quot;</span>;<br>        rocketMQTemplate.convertAndSend(topic, message);<br>        System.out.println(<span class="hljs-string">&quot;Message sent: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//消费者</span><br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.common.message.MessageExt;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RocketMQMessageListener( topictopic = ,  consumerGroup = ,  messageModel =  )</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RocketMQConsumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MessageListenerConcurrently</span> &#123;<br><br><span class="hljs-comment">//自定ACK应答逻辑</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> &#123;<br>            <span class="hljs-keyword">for</span> (MessageExt messageExt : msgs) &#123;<br>                log.debug(<span class="hljs-string">&quot;received msg: &#123;&#125;&quot;</span>, messageExt);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                    handleMessage(messageExt);<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">costTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - now;<br>                <span class="hljs-comment">//消费逻辑</span><br>                    log.debug(<span class="hljs-string">&quot;consume &#123;&#125; cost: &#123;&#125; ms&quot;</span>, messageExt.getMsgId(), costTime);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    log.warn(<span class="hljs-string">&quot;consume message failed. messageId:&#123;&#125;, topic:&#123;&#125;, reconsumeTimes:&#123;&#125;&quot;</span>, messageExt.getMsgId(), messageExt.getTopic(), messageExt.getReconsumeTimes(), e);<br>                    context.setDelayLevelWhenNextConsume(delayLevelWhenNextConsume);<br>                    <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>        &#125;<br><br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/13/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/Netty%20%E5%85%A5%E9%97%A8/"/>
    <url>/2024/05/13/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/Netty%20%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Netty 是 _一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。</p><p>特点:<br>NIO：同步非阻塞网络编程模型</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>为什么Netty 使用什么NIO 不适用AIO(异步非阻塞) <ol><li>netty主体是Linux ,Windows 兼容不好</li><li>AIO 是接收数据需要预先分配缓存, 而不是 NIO 是接收时才需要分配缓存, 所以对连接数量非常大但流量小的情况, 内存浪费很多</li></ol></li><li>拆包和粘包: http传输过程中有缓冲区</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/04/25/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%B8%B8%E7%94%A8SQL%E8%AE%B0%E5%BD%95-Mysql%208.0/"/>
    <url>/2024/04/25/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%B8%B8%E7%94%A8SQL%E8%AE%B0%E5%BD%95-Mysql%208.0/</url>
    
    <content type="html"><![CDATA[<p>连续数字  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RECURSIVE</span> cte (num) <span class="hljs-keyword">AS</span><br>(<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br>  <span class="hljs-keyword">SELECT</span> num<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> cte <span class="hljs-keyword">WHERE</span> num <span class="hljs-operator">&lt;</span> <span class="hljs-number">30</span><br>)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> cte;<br><br></code></pre></td></tr></table></figure><p>连续日期 年月日</p><pre><code class="sql">SELECT * FROM  (WITH RECURSIVE cte (date_for) AS(  SELECT DATE(&#39;2024-03-12&#39;)  UNION ALL  SELECT DATE_ADD(date_for,INTERVAL 1 DAY)  FROM cte WHERE date_for &lt; DATE(&#39;2024-04-30&#39;))SELECT date_forFROM cte) temp  LEFT JOIN table_name  ON  DATE_FORMAT(table_name.create_time,&#39;%y-%m-%d&#39;)=temp.date_for</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis集群搭建</title>
    <link href="/2023/05/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%20%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/05/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/Redis%20%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="下载官方工具-redis-trib"><a href="#下载官方工具-redis-trib" class="headerlink" title="下载官方工具(redis-trib)"></a>下载官方工具(redis-trib)</h2><h3 id="1-redis-trib-需要ruby环境-可能需要镜像安装"><a href="#1-redis-trib-需要ruby环境-可能需要镜像安装" class="headerlink" title="1. redis-trib 需要ruby环境 可能需要镜像安装"></a>1. redis-trib 需要ruby环境 可能需要镜像安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install ruby rubygems -y<br></code></pre></td></tr></table></figure><h3 id="2-创建集群"><a href="#2-创建集群" class="headerlink" title="2. 创建集群"></a>2. 创建集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入redis安装目录</span><br>cd reids安装目录/src<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建集群 <span class="hljs-comment"># --replicas 每个主节点都有从节点 -a 密码认证</span></span><br>redis-trib create -a 123456 --replicas ip:prot ip:port<br></code></pre></td></tr></table></figure><p>说明:  一主一从 是为了防止集群挂掉  Redis 最多 16384个哈希槽  在创建集群时分配 在存入数据时进行CRC16(key) % 16384计算放入哈希槽 主节点挂掉从节点会顶替</p><h3 id="3-增加主节点"><a href="#3-增加主节点" class="headerlink" title="3. 增加主节点"></a>3. 增加主节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用如下命令即可添加节点将一个新的节点添加到集群中</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a 密码认证(没有密码不用带此参数)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--cluster add-node 添加节点 新节点IP:新节点端口 任意存活节点IP:任意存活节点端口</span><br>./bin/redis-cli -a 123456 --cluster add-node 192.168.100.104:8007 192.168.100.101:8001<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新分配哈希槽  all 表示所有</span><br>./bin/redis-cli --cluster reshard 192.168.100.101:8002<br><br></code></pre></td></tr></table></figure><h3 id="4-增加从节点"><a href="#4-增加从节点" class="headerlink" title="4. 增加从节点"></a>4. 增加从节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用如下命令即可添加节点将一个新的节点添加到集群中</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a 密码认证(没有密码不用带此参数)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--cluster add-node 添加节点 新节点IP:新节点端口 任意存活节点IP:任意存活节点端口</span><br>./bin/redis-cli -a 123456 --cluster add-node 192.168.100.104:8007 192.168.100.101:8001<br><span class="hljs-meta prompt_"># </span><span class="language-bash">连接redis</span><br>./bin/redis-cli<br><span class="hljs-meta prompt_"># </span><span class="language-bash">绑定主节点</span><br>CLUSTER REPLICATE 主节点ID<br></code></pre></td></tr></table></figure><h3 id="5-删除节点"><a href="#5-删除节点" class="headerlink" title="5.删除节点"></a>5.删除节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">执行如下命令删除节点</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a 密码认证(没有密码不用带此参数)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--cluster del-node 连接任意一个存活的节点IP:连接任意一个存活的节点端口 要删除节点ID</span> <br>./bin/redis-cli -a 123456 --cluster del-node 192.168.100.101:8002 8cf44439390dc9412813ad27c43858a6bb53365c<br><br></code></pre></td></tr></table></figure><h3 id="6-重新分配槽"><a href="#6-重新分配槽" class="headerlink" title="6.重新分配槽"></a>6.重新分配槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shel"># -a 密码认证(没有密码不用带此参数)<br># --cluster rebalance 重新分配集群中的槽位<br>./bin/redis-cli -a 123456 --cluster rebalance 192.168.100.101:8002<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>linux</tag>
      
      <tag>集群</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义持久层困框架</title>
    <link href="/2023/05/10/java/mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/05/10/java/mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<ol><li><p>根据路径获取流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Resouce.class.getClassLoader().getResourceAsStream(path)<br></code></pre></td></tr></table></figure></li><li><p>解析XML 文件流 生成  Bean           </p><ul><li>configuation :  用于存放数据库连接相关配置                       </li><li>mappedStatementMap  : 用于存放所有语句                             <ul><li>key:  statementId 由 namespace + 标签Id 组成               </li><li>value:  存放标签中各种属性值     </li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//利用dom4j 解析xml\</span><br><span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>().read(inputStream);<br>element.attributeValue(<span class="hljs-string">&quot;每个标签单独的值&quot;</span>);<br><span class="hljs-comment">//Xml解析出来的对象放进Properties中</span><br>properties.setProperty(name,value);<br><span class="hljs-comment">//生成对应的DataSource </span><br><span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">comboPooledDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br><span class="hljs-comment">//设置数据库连接属性</span><br><span class="hljs-comment">//放进自定义configuation 的datasrouce 属性中 方便后期使用</span><br><br><span class="hljs-comment">//获取xml文件路径 并且解析</span><br><span class="hljs-comment">//获取获取每个标签的值 生成mappedStatement </span><br><span class="hljs-comment">//追加到configuation 的 mappedStatementMap中 </span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建sqlSessionFactory 对象<ul><li>生产sqlSession:  </li></ul></li><li>实现SqlSession 方法<ul><li>selectList()</li><li>update()</li><li>….<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement,Object... params)</span>&#123;<br><span class="hljs-comment">//连接</span><br><span class="hljs-type">simpleExecutor</span> <span class="hljs-variable">simpleExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">simpleExecutor</span>();<br><span class="hljs-comment">//通过statementId  获取sql</span><br><span class="hljs-type">MappedStatement</span> <span class="hljs-variable">mappedStatement</span> <span class="hljs-operator">=</span> configuration.getMappedStatementMap().get(statementid);<br><span class="hljs-comment">//解析替换sql </span><br>List&lt;Object&gt; list = simpleExecutor.query(configuration, mappedStatement, params);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(Configuration configuration, MappedStatement mappedStatement, Object... params)</span>&#123;<br><span class="hljs-comment">//创建驱动,获取连接</span><br><span class="hljs-comment">//获取替换后的sql ? 替换#&#123;?&#125;</span><br><span class="hljs-comment">//利用反射获取值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameterMappingList.size(); i++) &#123;  <br><span class="hljs-comment">//获取 sql 中所需的 属性名</span><br>    <span class="hljs-type">ParameterMapping</span> <span class="hljs-variable">parameterMapping</span> <span class="hljs-operator">=</span> parameterMappingList.get(i);  <br><span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> parameterMapping.getContent();<br><span class="hljs-comment">//反射</span><br>Class&lt;?&gt; paramtertypeClass = Class.forName(paramterType);<br><span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> paramtertypeClass.getDeclaredField(content);<br><span class="hljs-comment">//暴力访问</span><br>declaredField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//获取到入参对应属性的值</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> declaredField.get(params[<span class="hljs-number">0</span>])<br><span class="hljs-comment">//执行sql 值设置</span><br>preparedStatement.setObject(i+<span class="hljs-number">1</span>,o);<br><br>&#125;<br><span class="hljs-comment">//执行sql </span><br><span class="hljs-comment">//封装返回结果集</span><br>....<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getMapper</span><span class="hljs-params">(Class&lt;?&gt; mapperClass)</span> &#123;  <br>    <span class="hljs-comment">// 使用JDK动态代理来为Dao接口生成代理对象，并返回  </span><br><span class="hljs-comment">//所有方法执行的时候都会调用invoke方法</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(DefaultSqlSession.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;mapperClass&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;  <br>        <span class="hljs-meta">@Override</span>  <br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>            <span class="hljs-comment">// 底层都还是去执行JDBC代码 //根据不同情况，来调用selctList或者selectOne  </span><br>            <span class="hljs-comment">// 准备参数 1：statmentid :sql语句的唯一标识：namespace.id= 接口全限定名.方法名  </span><br>            <span class="hljs-comment">// 方法名：findAll  </span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();  <br>            <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> method.getDeclaringClass().getName();  <br>  <br>            <span class="hljs-type">String</span> <span class="hljs-variable">statementId</span> <span class="hljs-operator">=</span> className+<span class="hljs-string">&quot;.&quot;</span>+methodName;  <br>  <br>            <span class="hljs-comment">// 准备参数2：params:args  </span><br>            <span class="hljs-comment">// 获取被调用方法的返回值类型  </span><br>            <span class="hljs-type">Type</span> <span class="hljs-variable">genericReturnType</span> <span class="hljs-operator">=</span> method.getGenericReturnType();  <br>            <span class="hljs-comment">// 判断是否进行了 泛型类型参数化  </span><br>            <span class="hljs-keyword">if</span>(genericReturnType <span class="hljs-keyword">instanceof</span> ParameterizedType)&#123;  <br>                List&lt;Object&gt; objects = selectList(statementId, args);  <br>                <span class="hljs-keyword">return</span> objects;  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> selectOne(statementId,args);  <br>  <br>        &#125;  <br>    &#125;);  <br>  <br>    <span class="hljs-keyword">return</span> (T) proxyInstance;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
      <tag>Myabtis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用时间监听推送邮件</title>
    <link href="/2023/04/12/%E8%87%AA%E5%BB%BA/%E5%8A%9F%E8%83%BD%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81/%E9%82%AE%E4%BB%B6/"/>
    <url>/2023/04/12/%E8%87%AA%E5%BB%BA/%E5%8A%9F%E8%83%BD%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81/%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖:"></a>pom依赖:</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sun.mail<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><ol><li>利用事件监听来推送邮件<h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendEmailProvider</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 推送邮件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mail      接收邮箱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> accountId 推送邮箱编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nickName  发件人名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> title     标题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content   推送内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendEmailMessage</span><span class="hljs-params">(String mail, Long accountId, String nickName, String title, String content)</span> &#123;<br>        <span class="hljs-type">SendEmailMessage</span> <span class="hljs-variable">sendEmailMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendEmailMessage</span>().setMail(mail)<br>                .setAccountId(accountId)<br>                .setNickname(nickName)<br>                .setTitle(title)<br>                .setContent(content);<br>        applicationContext.publishEvent(sendEmailMessage);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendEmailConsumer</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;email.sendHost:smtp.qq.com&#125;&quot;)</span><br>    String sendHost;<br>    <span class="hljs-meta">@Value(&quot;$&#123;email.sendPort:25&#125;&quot;)</span><br>    Integer sendPort;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;email.user&#125;&quot;)</span><br>    String sendUser;<br>    <span class="hljs-meta">@Value(&quot;$&#123;email.password&#125;&quot;)</span><br>    String password;<br>    <br>    <span class="hljs-meta">@EventListener</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(SendEmailMessage message)</span>&#123;<br>        <span class="hljs-comment">// 1. 创建发送账号</span><br>        <span class="hljs-type">MailAccount</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MailAccount</span>();<br>        <span class="hljs-comment">//构建推送参数</span><br>        account.setHost(sendHost);<br>        account.setPort(sendPort);<br>        account.setAuth(<span class="hljs-literal">true</span>);<br>        account.setFrom(sendUser);<br>        account.setUser(sendUser);<br>        account.setPass(password);<br>        <span class="hljs-comment">//推送</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">messageId</span> <span class="hljs-operator">=</span> MailUtil.send(account, message.getMail(),<br>                message.getTitle(), message.getContent(), <span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>邮件</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/08/java/mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89SQL%E6%B3%A8%E5%85%A5%E5%99%A8/"/>
    <url>/2023/03/08/java/mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89SQL%E6%B3%A8%E5%85%A5%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>自定义Mapper   extends BaseMapper<T>  增加方法</p><p>自己增加的方法  需要 extends AbstractMethod 方法</p><p>重写注入器   extends DefaultSqlInjector 重写 getMethodList 方法  记得 内部调用 super.getMethodList 方法</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Minio 选型</title>
    <link href="/2022/12/09/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/MINIO/"/>
    <url>/2022/12/09/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/MINIO/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MINIO是一款高性能、分布式的、开源的对象存储系统, 元数据与文件分开存放。</p><table><thead><tr><th align="center">对比项</th><th align="center">OSS</th><th align="center">文件系统</th></tr></thead><tbody><tr><td align="center">数据模型</td><td align="center">OSS是一个分布式的对象存储服务，提供的是一个Key-Value对形式的对象存储服务。</td><td align="center">文件系统是一种典型的树状索引结构。</td></tr><tr><td align="center">数据获取</td><td align="center">根据Object的名称（Key）唯一的获取该Object的内容。虽然用户可以使用类似test1/test.jpg的名字，但是这并不表示用户的Object是保存在test1目录下面的。对于OSS来说，test1/test.jpg仅仅只是一个字符串，与example.jpg并没有本质的区别。因此不同名称的Object之间的访问消耗的资源是类似的。</td><td align="center">一个名为test1/test.jpg的文件，访问过程需要先访问到test1这个目录，然后再在该目录下查找名为test.jpg的文件。</td></tr><tr><td align="center">优势</td><td align="center">支持海量的用户并发访问。</td><td align="center">支持文件的修改，比如修改指定偏移位置的内容、截断文件尾部等。也支持文件夹的操作，比如重命名目录、删除目录、移动目录等非常容易。</td></tr><tr><td align="center">劣势</td><td align="center">OSS保存的Object不支持修改（追加写Object需要调用特定的接口，生成的Object也和正常上传的Object类型上有差别）。用户哪怕是仅仅需要修改一个字节也需要重新上传整个Object。OSS可以通过一些操作来模拟类似文件夹的功能，但是代价非常昂贵。比如重命名目录，希望将test1目录重命名成test2，那么OSS的实际操作是将所有以test1/开头的Object都重新复制成以test2/开头的Object，这是一个非常消耗资源的操作。因此在使用OSS的时候要尽量避免类似的操作。</td><td align="center">受限于单个设备的性能。访问越深的目录消耗的资源也越大，操作拥有很多文件的目录也会非常慢。</td></tr></tbody></table><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件存储目录</span><br>mkdir -p /data/minio<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改可读权限</span><br>chmod +x minio <br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker运行</span><br>docker run -p 9000:9000 -e &quot;MINIO_ROOT_USER=admin&quot; -e &quot;MINIO_ROOT_PASSWORD=admin123&quot; -v /data/minio:/data -d minio/minio server /data<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>文件系统</tag>
      
      <tag>OSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dokcer 配置相关</title>
    <link href="/2022/11/11/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/Docker%E5%9F%BA%E6%9C%AC/"/>
    <url>/2022/11/11/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/Docker%E5%9F%BA%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h1><p>windwos 容器位于:\wsl$\docker-desktop-data\version-pack-data\community\docker\containers</p><h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射:"></a>端口映射:</h2><h3 id="1-创建容器时映射"><a href="#1-创建容器时映射" class="headerlink" title="1. 创建容器时映射"></a>1. 创建容器时映射</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 50001:22 -p 53306:3306 --privileged --name centos8 chenzhongxian/learn:v0.1<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">参数说明:<br>-p 宿主机端口:容器端口<br>-d  后台运行<br>--name 容器名 <br>--privileged  解决挂载问题 权限  container内的root拥有真正的root权限。<br>chenzhongxian/learn:v0.1 远程仓库:tag<br></code></pre></td></tr></table></figure><h3 id="2-后续添加—已创建容器"><a href="#2-后续添加—已创建容器" class="headerlink" title="2. 后续添加—已创建容器"></a>2. 后续添加—已创建容器</h3><h4 id="1-docker-container-update-–restart-always-容器名字"><a href="#1-docker-container-update-–restart-always-容器名字" class="headerlink" title="1. docker container update –restart=always 容器名字"></a>1. docker container update –restart=always 容器名字</h4><h4 id="2-关闭docker"><a href="#2-关闭docker" class="headerlink" title="2.关闭docker"></a>2.关闭docker</h4><h4 id="3-修改容器下-config-v2-json"><a href="#3-修改容器下-config-v2-json" class="headerlink" title="3.修改容器下 config.v2.json"></a>3.修改容器下 config.v2.json</h4><p>​             K:容器端口</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;Config&quot;</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;ExposedPorts&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;22/tcp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;3306/tcp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-修改hostconfig-json"><a href="#4-修改hostconfig-json" class="headerlink" title="4.修改hostconfig.json"></a>4.修改hostconfig.json</h4><p>​            K: 容器端口  V:{ “HostIp”:””, “HostPort”:”宿主机映射端口”}</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;PortBindings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;22/tcp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;HostIp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;HostPort&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;50001&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;3306/tcp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;HostIp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;HostPort&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;53306&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="5-docker-重启"><a href="#5-docker-重启" class="headerlink" title="5.docker 重启"></a>5.docker 重启</h5><h2 id="挂载卷"><a href="#挂载卷" class="headerlink" title="挂载卷:"></a>挂载卷:</h2><h3 id="1-创建容器时进行挂载"><a href="#1-创建容器时进行挂载" class="headerlink" title="1. 创建容器时进行挂载"></a>1. 创建容器时进行挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dockcer run -v 主机:容器<br></code></pre></td></tr></table></figure><h3 id="2-后续添加已创建容器"><a href="#2-后续添加已创建容器" class="headerlink" title="2. 后续添加已创建容器"></a>2. 后续添加已创建容器</h3><h4 id="1-修改-hostconfig-json-文件-Binds-列表中增加-“主机目录-容器目录”"><a href="#1-修改-hostconfig-json-文件-Binds-列表中增加-“主机目录-容器目录”" class="headerlink" title="1. 修改 hostconfig.json 文件  Binds 列表中增加 “主机目录:容器目录”"></a>1. 修改 hostconfig.json 文件  Binds 列表中增加 “主机目录:容器目录”</h4><h3 id="2-修改-config-v2-json-文件"><a href="#2-修改-config-v2-json-文件" class="headerlink" title="2. 修改 config.v2.json 文件"></a>2. 修改 config.v2.json 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;MountPoints&quot;: &#123;<br> <br>&quot;/import（容器）&quot;: &#123;<br>            &quot;Source&quot;: &quot;/data（主机）&quot;,<br>            &quot;Destination&quot;: &quot;/import（容器）&quot;,<br>            &quot;RW&quot;: true,<br>            &quot;Name&quot;: &quot;&quot;,<br>            &quot;Driver&quot;: &quot;&quot;,<br>            &quot;Type&quot;: &quot;bind&quot;,<br>            &quot;Propagation&quot;: &quot;rprivate&quot;,<br>            &quot;Spec&quot;: &#123;<br>                &quot;Type&quot;: &quot;bind&quot;,<br>                &quot;Source&quot;: &quot;/data（主机）&quot;,<br>                &quot;Target&quot;: &quot;/import（容器）&quot;<br>            &#125;,<br>            &quot;SkipMountpointCreation&quot;: false<br>        &#125;<br><br></code></pre></td></tr></table></figure><h1 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>docker-compose是基于docker的开源项目，利用yaml配置文件对容器快速编排，只能对本机的docker进行处理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义Mybatis 插件</title>
    <link href="/2022/10/10/java/mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/10/10/java/mybatis/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>每个对象创建时，都需要通过  interceptorChain.pluginAll(执行器)生成代理对象</li><li>pluginAll 方法中遍历拦截器对 新建对象进行代理</li></ol><h3 id="可拦截对象"><a href="#可拦截对象" class="headerlink" title="可拦截对象"></a>可拦截对象</h3><ul><li>Excutor : sql 执行器</li><li>StatementHandler : Sql 构建器</li><li>ParameterHandler : 参数处理器</li><li>ResultSetHandler ： 结果集处理器</li></ul><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">@Signature(  </span><br><span class="hljs-meta">    type = Executor.class,  </span><br><span class="hljs-meta">    method = &quot;query&quot;,  </span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;  </span><br><span class="hljs-meta">), @Signature(  </span><br><span class="hljs-meta">    type = Executor.class,  </span><br><span class="hljs-meta">    method = &quot;query&quot;,  </span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;  </span><br><span class="hljs-meta">), @Signature(  </span><br><span class="hljs-meta">    type = Executor.class,  </span><br><span class="hljs-meta">    method = &quot;update&quot;,  </span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class&#125;  </span><br><span class="hljs-meta">)&#125;)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MasterSlaveAutoRoutingPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br><span class="hljs-comment">//只要被拦截的方法都会执行改内容 jdk 动态代理 invoke</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Invocation invocation)</span>&#123;<br><span class="hljs-comment">//执行原方法</span><br><span class="hljs-keyword">return</span> invocation.proceed() <br><br>&#125;<br><span class="hljs-comment">//把该拦截器放到拦截链中</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">plugin</span><span class="hljs-params">(Object target)</span> &#123;  <br>    <span class="hljs-keyword">return</span> Plugin.wrap(target, <span class="hljs-built_in">this</span>);  <br>&#125; <br><span class="hljs-comment">//读取配置信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;  <br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Myabtis</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/zookeeper%20%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/10/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/zookeeper%20%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="zookeeper-使用"><a href="#zookeeper-使用" class="headerlink" title="zookeeper 使用"></a>zookeeper 使用</h1><p>​    树形结构</p><h2 id="javaAPI使用"><a href="#javaAPI使用" class="headerlink" title="javaAPI使用"></a>javaAPI使用</h2><h3 id="1-建立连接"><a href="#1-建立连接" class="headerlink" title="1.建立连接"></a>1.建立连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CuratorFramework</span> <span class="hljs-variable">zkCli</span> <span class="hljs-operator">=</span> CuratorFrameworkFactory.builder()<br>    <span class="hljs-comment">//zookeeper server IP:prot</span><br>               .connectString(<span class="hljs-string">&quot;192.168.137.128:2181&quot;</span>)<br>    <span class="hljs-comment">//会话超时</span><br>               .sessionTimeoutMs(<span class="hljs-number">9000</span>)<br>    <span class="hljs-comment">//连接超时</span><br>               .connectionTimeoutMs(<span class="hljs-number">9000</span>)<br>    <span class="hljs-comment">//重试策略</span><br>               .retryPolicy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExponentialBackoffRetry</span>(<span class="hljs-number">300</span>, <span class="hljs-number">10</span>))<br>    <span class="hljs-comment">//命名空间  该连接操作的根目录</span><br>               .namespace(<span class="hljs-string">&quot;test&quot;</span>).build();<br><span class="hljs-comment">//开启服务</span><br>       zkCli.start();<br></code></pre></td></tr></table></figure><h3 id="2-添加节点"><a href="#2-添加节点" class="headerlink" title="2.添加节点"></a>2.添加节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">zkCli.create()<br>    <span class="hljs-comment">//创建级节点</span><br>.creatingparentsIfNeeded()<br>    <span class="hljs-comment">//节点类型</span><br>    .withMode()<br>   <span class="hljs-comment">//节点</span><br>    .forPath(<span class="hljs-string">&quot;路径&quot;</span>,数据.getBytes(StandardCharsets.UTF_8))<br></code></pre></td></tr></table></figure><h3 id="3-修改节点"><a href="#3-修改节点" class="headerlink" title="3.修改节点"></a>3.修改节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">zkCli().setData().foreach()<br>zkCli().<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/09/java/SpringCloud/security%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/10/09/java/SpringCloud/security%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Oauth认证流程</p><p><img src="https://gitee.com/czx865199614/note-picture/raw/master/image/1.png"></p><p>token 认证流程</p><p><img src="https://gitee.com/czx865199614/note-picture/raw/master/image/image-20211230114314413.png" alt="image-20211230114314413"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/09/java/mybatis/mybatis%E7%BC%93%E5%AD%98/"/>
    <url>/2022/10/09/java/mybatis/mybatis%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<ol><li>一级缓存基于sqlSession</li><li>二级缓存基于namespace 或者mappper </li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/09/java/springBoot/Spring%20%E5%9F%BA%E7%A1%80%E6%A0%B8%E5%BF%83/"/>
    <url>/2022/10/09/java/springBoot/Spring%20%E5%9F%BA%E7%A1%80%E6%A0%B8%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-基础"><a href="#Spring-基础" class="headerlink" title="Spring 基础"></a>Spring 基础</h2><h3 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h3><h4 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h4><h6 id="核心：资源使用不由双方管理，交由第三方管理"><a href="#核心：资源使用不由双方管理，交由第三方管理" class="headerlink" title="核心：资源使用不由双方管理，交由第三方管理"></a>核心：资源使用不由双方管理，交由第三方管理</h6><h6 id="控制：控制对象"><a href="#控制：控制对象" class="headerlink" title="控制：控制对象"></a>控制：控制对象</h6><h6 id="反转：主动创建依赖对象–-gt-被动的接受依赖对象（谁使用时谁去传入）"><a href="#反转：主动创建依赖对象–-gt-被动的接受依赖对象（谁使用时谁去传入）" class="headerlink" title="反转：主动创建依赖对象–&gt;被动的接受依赖对象（谁使用时谁去传入）"></a>反转：主动创建依赖对象–&gt;被动的接受依赖对象（谁使用时谁去传入）</h6><h3 id="DI-依赖注入-IOC-的实现"><a href="#DI-依赖注入-IOC-的实现" class="headerlink" title="DI 依赖注入 IOC 的实现"></a>DI 依赖注入 IOC 的实现</h3><h6 id="依赖注入：set注入"><a href="#依赖注入：set注入" class="headerlink" title="依赖注入：set注入"></a>依赖注入：set注入</h6><h6 id="依赖：bean-对象依赖于spring-容器"><a href="#依赖：bean-对象依赖于spring-容器" class="headerlink" title="依赖：bean 对象依赖于spring 容器"></a>依赖：bean 对象依赖于spring 容器</h6><h6 id="注入：bean-对象的所有属性，由容器注入"><a href="#注入：bean-对象的所有属性，由容器注入" class="headerlink" title="注入：bean 对象的所有属性，由容器注入"></a>注入：bean 对象的所有属性，由容器注入</h6><h6 id="c-p-约束-简写配置"><a href="#c-p-约束-简写配置" class="headerlink" title="c/p 约束 简写配置"></a>c/p 约束 简写配置</h6><h3 id="自动装配-本质是依赖注入"><a href="#自动装配-本质是依赖注入" class="headerlink" title="自动装配 本质是依赖注入"></a>自动装配 本质是依赖注入</h3><h6 id="1-xml–-gt-autowrite-”ByName-Bytype”-根据set后面的属性名自动寻找"><a href="#1-xml–-gt-autowrite-”ByName-Bytype”-根据set后面的属性名自动寻找" class="headerlink" title="1.xml–&gt;autowrite=”ByName/Bytype” 根据set后面的属性名自动寻找"></a>1.xml–&gt;autowrite=”ByName/Bytype” 根据set后面的属性名自动寻找</h6><h6 id="2-AutoWrite-默认根据Bytype进行装配"><a href="#2-AutoWrite-默认根据Bytype进行装配" class="headerlink" title="2.@AutoWrite 默认根据Bytype进行装配"></a>2.@AutoWrite 默认根据Bytype进行装配</h6><h6 id="Nullable-说明这个值可以为null"><a href="#Nullable-说明这个值可以为null" class="headerlink" title="@Nullable 说明这个值可以为null"></a>@Nullable 说明这个值可以为null</h6><h6 id="Qualifer-指定bean-名"><a href="#Qualifer-指定bean-名" class="headerlink" title="@Qualifer() 指定bean 名"></a>@Qualifer() 指定bean 名</h6><p>Bean</p><h6 id="循环依赖-利用3级缓存"><a href="#循环依赖-利用3级缓存" class="headerlink" title="循环依赖 利用3级缓存"></a>循环依赖 利用3级缓存</h6><p>​    </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/MQ(%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97)/"/>
    <url>/2022/10/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/MQ(%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97)/</url>
    
    <content type="html"><![CDATA[<h1 id="MQ-消息队列"><a href="#MQ-消息队列" class="headerlink" title="MQ(消息队列)"></a>MQ(消息队列)</h1><p>账号密码：admin</p><h3 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a>什么是中间件</h3><h6 id="实现跨平台通讯，高可用，持久化"><a href="#实现跨平台通讯，高可用，持久化" class="headerlink" title="实现跨平台通讯，高可用，持久化"></a>实现跨平台通讯，高可用，持久化</h6><h2 id="RabbitMq六种工作模式"><a href="#RabbitMq六种工作模式" class="headerlink" title="RabbitMq六种工作模式"></a>RabbitMq六种工作模式</h2><h4 id="Simple简单模式"><a href="#Simple简单模式" class="headerlink" title="Simple简单模式"></a>Simple简单模式</h4><h6 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h6><h4 id="Work模式"><a href="#Work模式" class="headerlink" title="Work模式"></a>Work模式</h4><h6 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h6><h5 id="两种消费模式"><a href="#两种消费模式" class="headerlink" title="两种消费模式"></a>两种消费模式</h5><h6 id="轮询模式"><a href="#轮询模式" class="headerlink" title="轮询模式"></a>轮询模式</h6><h6 id="公平分发模式：能者多多劳"><a href="#公平分发模式：能者多多劳" class="headerlink" title="公平分发模式：能者多多劳"></a>公平分发模式：能者多多劳</h6><h4 id="layout模式"><a href="#layout模式" class="headerlink" title="layout模式"></a>layout模式</h4><h6 id="一对多-交换机（不是默认的交换机）"><a href="#一对多-交换机（不是默认的交换机）" class="headerlink" title="一对多+交换机（不是默认的交换机）"></a>一对多+交换机（不是默认的交换机）</h6><h4 id="Routing模式"><a href="#Routing模式" class="headerlink" title="Routing模式"></a>Routing模式</h4><h6 id="增加route-key-对队列进行分组，消息分组发送"><a href="#增加route-key-对队列进行分组，消息分组发送" class="headerlink" title="增加route key 对队列进行分组，消息分组发送"></a>增加route key 对队列进行分组，消息分组发送</h6><h4 id="Topics-模式"><a href="#Topics-模式" class="headerlink" title="Topics 模式"></a>Topics 模式</h4><h6 id="支持模糊查询-多少都可以-一级"><a href="#支持模糊查询-多少都可以-一级" class="headerlink" title="支持模糊查询 # 多少都可以 , * 一级"></a>支持模糊查询 # 多少都可以 , * 一级</h6><h3 id="Springboot-整合"><a href="#Springboot-整合" class="headerlink" title="Springboot 整合"></a>Springboot 整合</h3><h6 id="1-导入依赖-amqp"><a href="#1-导入依赖-amqp" class="headerlink" title="1.导入依赖 amqp"></a>1.导入依赖 amqp</h6><h6 id="2-声明交换机，队列与关系"><a href="#2-声明交换机，队列与关系" class="headerlink" title="2.声明交换机，队列与关系"></a>2.声明交换机，队列与关系</h6><h6 id="3-利用-rabbitmqTemplate-发送消息"><a href="#3-利用-rabbitmqTemplate-发送消息" class="headerlink" title="3.利用 rabbitmqTemplate 发送消息"></a>3.利用 rabbitmqTemplate 发送消息</h6><h6 id="4-RabbitMqListener-queue-””-类-RabbitHandler-方法-参数需要有个Sting"><a href="#4-RabbitMqListener-queue-””-类-RabbitHandler-方法-参数需要有个Sting" class="headerlink" title="4. @RabbitMqListener(queue=””) 类 @RabbitHandler 方法 参数需要有个Sting"></a>4. @RabbitMqListener(queue=””) 类 @RabbitHandler 方法 参数需要有个Sting</h6><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><h6 id="TTL：消息过期时间"><a href="#TTL：消息过期时间" class="headerlink" title="TTL：消息过期时间"></a>TTL：消息过期时间</h6><h6 id="死信队列：-当消息过期，被拒绝时存放的队列"><a href="#死信队列：-当消息过期，被拒绝时存放的队列" class="headerlink" title="死信队列： 当消息过期，被拒绝时存放的队列"></a>死信队列： 当消息过期，被拒绝时存放的队列</h6><h3 id="分布式应用"><a href="#分布式应用" class="headerlink" title="分布式应用"></a>分布式应用</h3><h6 id="可靠生产问题：跨平台事务回滚"><a href="#可靠生产问题：跨平台事务回滚" class="headerlink" title="可靠生产问题：跨平台事务回滚"></a>可靠生产问题：跨平台事务回滚</h6><h6 id="定时重发-：利用消息回执机制"><a href="#定时重发-：利用消息回执机制" class="headerlink" title="定时重发 ：利用消息回执机制"></a>定时重发 ：利用消息回执机制</h6><h6 id="消费者消费时出现异常会出现无限循环"><a href="#消费者消费时出现异常会出现无限循环" class="headerlink" title="消费者消费时出现异常会出现无限循环"></a>消费者消费时出现异常会出现无限循环</h6><h6 id="解决方案：1-配置重试次数"><a href="#解决方案：1-配置重试次数" class="headerlink" title="解决方案：1.配置重试次数"></a>解决方案：1.配置重试次数</h6> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">BindingBuilder.bind(queue).to(exchange).with(bindingKey)<br>参数说明:<br>queue:队列实例对象<br>exchange:交换机实例对象<br>   bindingKey: 绑定关系<br></code></pre></td></tr></table></figure><p>``</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/ElasticSearch%20%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/10/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/ElasticSearch%20%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch-使用"><a href="#ElasticSearch-使用" class="headerlink" title="ElasticSearch 使用"></a>ElasticSearch 使用</h1><p>/_cat查看使用</p><p>put 请求或者post 保存数据 </p><p> / _update 会对比数据  数据没变化贼不叠加 版本 不加 _update,只会迭代版本号 </p><p> ?_seq_no=1&amp;_primary_term=1  乐观锁修改需要加上这个查询参数</p><p> get 请求  查询数据  </p><p>delete 删除数据</p><p>批量操作  /bluk</p><p>/_search 查询语句</p><p>“query  “{}查询</p><p>​        “match”:{} 分词查询   全文检索 然后打分</p><p>​        “match_all”:查询所有</p><p>​        “match_phrase”:{}  短语匹配 不分词</p><p>​        match</p><p>​        “sort”:排序 </p><p>​        “from”:1,”size”:1 相当于 limt 起始 ,大小</p><p>“term”:  {} 用于非文本字段查询</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http">//查询 字段address| city 中 包含 mail | movico 的文档<br>GET 索引/_search<br>&#123;<br>&quot;query&quot;&#123;<br>&quot;multi_match&quot;:&#123;<br>&quot;query&quot;:&quot;mall movico&quot;,<br>&quot;fields&quot;:[&quot;address&quot;, &quot;city&quot;]<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http">//查询 字段address| city 中 包含 mail | movico 的文档<br>GET 索引/_search<br>&#123;<br>&quot;query&quot;&#123;<br>&quot;bool&quot;:&#123;<br>&quot;must&quot;:[&#123;&quot;match&quot;:&#123;&#125;&#125;,&#123;...&#125;]//必须满足<br>&quot;must_not&quot;:[&#123;&#125;,&#123;&#125;]//必须不满足<br>&quot;should&quot;:[&#123;&#125;,&#123;&#125;] //满足加分  不满足也可以<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>“filter”:{}</p><p>“aggs”:{“别名”:{聚合操作}</p><p>​        ,:”aggs”:{同上}//输入为上步操作结果</p><p>}</p><p>“mapping”:{“</p><p>​    “properties”:{</p><p> 字段: 类型}    </p><p>“}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/Dubbo%20%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/10/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/Dubbo%20%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Dubbo-使用"><a href="#Dubbo-使用" class="headerlink" title="Dubbo 使用"></a>Dubbo 使用</h1><h2 id="1-整合springboot"><a href="#1-整合springboot" class="headerlink" title="1.整合springboot"></a>1.整合springboot</h2><p>​            1.引入pom依赖                </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba.spring.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">2.0</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!-- 引入zookeeper的依赖 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.101tec&lt;/groupId&gt;<br>    &lt;artifactId&gt;zkclient&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">0.10</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>​            2.添加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">#别名  一般与项目或者模块名一致<br>spring.dubbo.application.name=dubbo-provider<br>#注册中心 所在ip 和协议<br>spring.dubbo.application.registry=zookeeper:<span class="hljs-comment">//192.168.0.128:2181</span><br></code></pre></td></tr></table></figure><p>​            3.启动类添加注解  @EnableDubboConfiguration</p><p>​            4.提供方@Service  dubbo下的</p><p>​            5.消费方@Reference  远程调用</p><p>​        <strong>注意： 先启动提供方再启动消费方</strong></p><h2 id="2-附加知识点"><a href="#2-附加知识点" class="headerlink" title="2.附加知识点"></a>2.附加知识点</h2><p>​            1.序列化：提供方与消费方的对象传输  需要对象 实现Serialized接口</p><p>​            2.本地缓存：dubbo会在首次访问进行缓存，当服务地址修改时 注册中心会通知</p><p>​            3.超时与重试:@Service(timeout=,retries=)</p><p>​            4.多版本：@Service(vsersion=)  @Reference（vsersion=）</p><p>​            5.负载均衡：@Reference(loadbalance=)  #random 随机 roundrobin 权重轮询 consistentHash 相同参数 发给同一个提供者</p><p>​            6.集群容错：@Reference(cluster=)</p><p>​            7.服务降级：@Reference(mock=)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/Canal/"/>
    <url>/2022/10/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/Canal/</url>
    
    <content type="html"><![CDATA[<h2 id="Canal"><a href="#Canal" class="headerlink" title="Canal"></a>Canal</h2><h6 id="阿里巴巴下的数据库同步工具，类似于主从-现阶段只支持mysql-修改端安装Canal"><a href="#阿里巴巴下的数据库同步工具，类似于主从-现阶段只支持mysql-修改端安装Canal" class="headerlink" title="阿里巴巴下的数据库同步工具，类似于主从  现阶段只支持mysql,修改端安装Canal"></a>阿里巴巴下的数据库同步工具，类似于主从  现阶段只支持mysql,修改端安装Canal</h6>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客</title>
    <link href="/2022/10/09/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/10/09/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h1><p>直接去看<a href="https://github.com/fluid-dev/hexo-theme-fluid">github 官方地址-Fluid</a>就行 上面有具体的操作 </p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到指定目录</span><br>cd ../source/_posts  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建文件MakeDown 文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清除缓存&amp;&amp;</span><br>npx hexo clean &amp;&amp; npx hexo generate &amp;&amp; npx hexo deploy<br></code></pre></td></tr></table></figure><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><p>屏蔽指定文件夹:  ignore</p>]]></content>
    
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
