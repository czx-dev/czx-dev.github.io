<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Minio 选型</title>
    <link href="/2022/12/09/MINIO/"/>
    <url>/2022/12/09/MINIO/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MINIO是一款高性能、分布式的、开源的对象存储系统, 元数据与文件分开存放。</p><table><thead><tr><th align="center">对比项</th><th align="center">OSS</th><th align="center">文件系统</th></tr></thead><tbody><tr><td align="center">数据模型</td><td align="center">OSS是一个分布式的对象存储服务，提供的是一个Key-Value对形式的对象存储服务。</td><td align="center">文件系统是一种典型的树状索引结构。</td></tr><tr><td align="center">数据获取</td><td align="center">根据Object的名称（Key）唯一的获取该Object的内容。虽然用户可以使用类似test1/test.jpg的名字，但是这并不表示用户的Object是保存在test1目录下面的。对于OSS来说，test1/test.jpg仅仅只是一个字符串，与example.jpg并没有本质的区别。因此不同名称的Object之间的访问消耗的资源是类似的。</td><td align="center">一个名为test1/test.jpg的文件，访问过程需要先访问到test1这个目录，然后再在该目录下查找名为test.jpg的文件。</td></tr><tr><td align="center">优势</td><td align="center">支持海量的用户并发访问。</td><td align="center">支持文件的修改，比如修改指定偏移位置的内容、截断文件尾部等。也支持文件夹的操作，比如重命名目录、删除目录、移动目录等非常容易。</td></tr><tr><td align="center">劣势</td><td align="center">OSS保存的Object不支持修改（追加写Object需要调用特定的接口，生成的Object也和正常上传的Object类型上有差别）。用户哪怕是仅仅需要修改一个字节也需要重新上传整个Object。OSS可以通过一些操作来模拟类似文件夹的功能，但是代价非常昂贵。比如重命名目录，希望将test1目录重命名成test2，那么OSS的实际操作是将所有以test1/开头的Object都重新复制成以test2/开头的Object，这是一个非常消耗资源的操作。因此在使用OSS的时候要尽量避免类似的操作。</td><td align="center">受限于单个设备的性能。访问越深的目录消耗的资源也越大，操作拥有很多文件的目录也会非常慢。</td></tr></tbody></table><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件存储目录</span><br>mkdir -p /data/minio<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改可读权限</span><br>chmod +x minio <br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker运行</span><br>docker run -p 9000:9000 -e &quot;MINIO_ROOT_USER=admin&quot; -e &quot;MINIO_ROOT_PASSWORD=admin123&quot; -v /data/minio:/data -d minio/minio server /data<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义Mybatis 插件</title>
    <link href="/2022/10/10/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/10/10/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>每个对象创建时，都需要通过  interceptorChain.pluginAll(执行器)生成代理对象</li><li>pluginAll 方法中遍历拦截器对 新建对象进行代理</li></ol><h3 id="可拦截对象"><a href="#可拦截对象" class="headerlink" title="可拦截对象"></a>可拦截对象</h3><ul><li>Excutor : sql 执行器</li><li>StatementHandler : Sql 构建器</li><li>ParameterHandler : 参数处理器</li><li>ResultSetHandler ： 结果集处理器</li></ul><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">@Signature(  </span><br><span class="hljs-meta">    type = Executor.class,  </span><br><span class="hljs-meta">    method = &quot;query&quot;,  </span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;  </span><br><span class="hljs-meta">), @Signature(  </span><br><span class="hljs-meta">    type = Executor.class,  </span><br><span class="hljs-meta">    method = &quot;query&quot;,  </span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;  </span><br><span class="hljs-meta">), @Signature(  </span><br><span class="hljs-meta">    type = Executor.class,  </span><br><span class="hljs-meta">    method = &quot;update&quot;,  </span><br><span class="hljs-meta">    args = &#123;MappedStatement.class, Object.class&#125;  </span><br><span class="hljs-meta">)&#125;)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MasterSlaveAutoRoutingPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br><span class="hljs-comment">//只要被拦截的方法都会执行改内容 jdk 动态代理 invoke</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Invocation invocation)</span>&#123;<br><span class="hljs-comment">//执行原方法</span><br><span class="hljs-keyword">return</span> invocation.proceed() <br><br>&#125;<br><span class="hljs-comment">//把该拦截器放到拦截链中</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">plugin</span><span class="hljs-params">(Object target)</span> &#123;  <br>    <span class="hljs-keyword">return</span> Plugin.wrap(target, <span class="hljs-built_in">this</span>);  <br>&#125; <br><span class="hljs-comment">//读取配置信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;  <br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>Myabtis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客</title>
    <link href="/2022/10/09/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/10/09/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h1><p>直接去看<a href="https://github.com/fluid-dev/hexo-theme-fluid">github 官方地址-Fluid</a>就行 上面有具体的操作 </p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到指定目录</span><br>cd ../source/_posts  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建文件MakeDown 文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清除缓存&amp;&amp;</span><br>npm hexo clean &amp;&amp; npm hexo generate &amp;&amp; npm hexo deploy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
